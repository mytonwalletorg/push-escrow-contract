;; =============== DESCRIPTION ===============
;;
;; The contract implements a secure escrow payment system allowing for transfers between Telegram users.
;;
;; Flow:
;; 1. The sender creates a "check" with a unique `chat_instance` parameter or `username` and funds it with TON or jetton.
;;    The check is stored in the contract's storage and can be accessed by the receiver.
;; 2. The receiver must cash out the check by providing the same `chat_instance` value or `username`,
;;    signed by Telegram's server to verify their identity.
;; 3. Upon successful verification, the contract transfers the funds to the receiver.
;;    The check is deleted from the contract's storage.
;; 4. In case of an error, the contract refunds the funds to the sender.
;;    Again, the check is deleted from the contract's storage.
;;
;; Check creation requires fee while cashing is accessible to anyone with a valid signature.
;; 1. op::create_check - only available via internal messages (requires TON to pay for fees)
;; 2. op::cash_check - only available via external messages (allows receivers who don't have TON to claim their funds)
;;
;; Security:
;; - Checks are bound to specific Telegram chats via the `chat_instance` parameter or specific usernames via `username`.
;; - Requires cryptographic proof (signature) from Telegram to authorize payouts.
;; - The signature includes both the `chat_instance`/`username` and a payload (first 72 bits of the receiver's address)
;;   ensuring the signature is specific to both the chat/username and the receiving wallet.
;; - Prevents double-spending by immediately deleting the check from the contract's storage.
;;
;; Storage structure:
;; - sudoer:MsgAddress
;; - usdt_jetton_wallet:MsgAddress
;; - my_jetton_wallet:MsgAddress
;; - checks_dict:HashmapE(32, CheckData)
;;
;; CheckData:
;; - amount:int124
;; - is_jetton:int1
;; - jetton_wallet_address:^Cell
;; - is_tiny_jetton:int1
;; - with_username:int1
;; - chat_instance:int64 (when with_username = 0)
;; - username:^Cell (when with_username = -1)
;; - comment:^Cell
;; - status:int8
;; - created_at:int32
;; - sender_address:^Cell

#include "imports/stdlib.fc";

;; Operation codes
const int op::jetton_transfer_notification = 0x7362d09c;
const int op::jetton_transfer = 0xf8a7ea5;
const int op::set_acl = 0x996c7334;
const int op::sudoer_request = 0x5e2a5f0a;
const int op::create_check = 0x6a3f7c7f;
const int op::cash_check = 0x69e7ac28;

;; op::set_acl error codes
const int ERROR_JETTON_WALLETS_ALREADY_SET = 400;
const int ERROR_UNAUTHORIZED_JETTON_WALLET = 401;
const int ERROR_MISSING_FORWARD_PAYLOAD = 402;
const int ERROR_INVALID_FORWARD_PAYLOAD = 403;
const int ERROR_INVALID_FORWARD_OPERATION = 404;

;; op::create_check error codes
const int ERROR_CHECK_ALREADY_EXISTS = 410;
const int ERROR_INSUFFICIENT_FUNDS = 411;

;; op::cash_check error codes
const int ERROR_CHECK_NOT_FOUND = 420;
const int ERROR_INVALID_RECEIVER_ADDRESS = 421;
const int ERROR_INCORRECT_SIGNATURE = 422;
const int ERROR_AUTH_DATE_TOO_OLD = 423;
const int ERROR_CHAT_INSTANCE_MISMATCH = 424;
const int ERROR_USERNAME_MISMATCH = 425;
const int ERROR_UNAUTHORIZED_SENDER = 430;

;; Check status
const int status::pending = 0;

const int TON_CREATE_GAS_FEE = 1000000;  ;; 0.001 TON
const int TON_CASH_GAS_FEE = 3000000;  ;; 0.003 TON
const int TON_TRANSFER_FEE = 3000000;  ;; 0.003 TON
const int TON_FULL_FEE = TON_CREATE_GAS_FEE + TON_CASH_GAS_FEE + TON_TRANSFER_FEE;

const int JETTON_CREATE_GAS_FEE = 3000000;  ;; 0.003 TON
const int JETTON_CASH_GAS_FEE = 7000000;  ;; 0.007 TON
const int JETTON_TRANSFER_FEE = 50000000;  ;; 0.05 TON
const int TINY_JETTON_TRANSFER_FEE = 18000000;  ;; 0.018 TON
const int JETTON_FULL_FEE = JETTON_CREATE_GAS_FEE + JETTON_CASH_GAS_FEE + JETTON_TRANSFER_FEE;
const int TINY_JETTON_FULL_FEE = JETTON_CREATE_GAS_FEE + JETTON_CASH_GAS_FEE + TINY_JETTON_TRANSFER_FEE;

const int MSG_FLAG_NON_BOUNCEABLE = 0x10;

const slice VERIFICATION_MESSAGE_PREFIX = "5267393577:WebAppData";
const int HEAD_SIZE = 72;
const int TELEGRAM_PUBKEY = 0xe7bf03a2fa4602af4580703d88dda5bb59f32ed8b02a56c187fe7d34caed242d;

const slice DEFAULT_COMMENT = "via @push";

(int) string_to_int(slice str) inline {
  int result = 0;
  int sign_factor = 1;
  
  ;; Check if the first character is a minus sign
  int first_char = str.preload_uint(8);
  if (first_char == 45) {  ;; ASCII code for '-'
    sign_factor = -1;
    str~load_uint(8);  ;; consume the minus sign
  }

  repeat(str.slice_bits() / 8) {
    int char = str~load_uint(8);
    result = (result * 10) + (char - 48);
  }

  return result * sign_factor;
}

;; Base64URL encoding utility functions
;; Character set for base64url encoding: A-Z, a-z, 0-9, -, _
(slice) get_b64_alphabet() asm "x{4142434445464748494A4B4C4D4E4F505152535455565758595A6162636465666768696A6B6C6D6E6F707172737475767778797A303132333435363738392D5F} PUSHSLICE";
(slice) extract_substring(slice source, int offset_pos, int bit_length) asm "SDSUBSTR";

;; Encodes binary data to base64url format
;; Note: Input data length must be divisible by 24 bits (3 bytes)
;; This implementation doesn't handle partial chunks
(builder) encode_to_base64url(builder binary_data) inline {
  builder encoded_result = begin_cell();
  slice charset = get_b64_alphabet();
  slice binary_slice = binary_data.end_cell().begin_parse();

  ;; Process all chunks in one loop without extra variables
  while (binary_slice.slice_bits() >= 24) {
    ;; Load 24 bits at once instead of 3 separate loads
    int combined = binary_slice~load_uint(24);

    encoded_result = encoded_result
      .store_slice(charset.extract_substring((combined >> 18) * 8, 8))
      .store_slice(charset.extract_substring(((combined >> 12) & 63) * 8, 8))
      .store_slice(charset.extract_substring(((combined >> 6) & 63) * 8, 8))
      .store_slice(charset.extract_substring((combined & 63) * 8, 8));
  }

  return encoded_result;
}

(slice) create_verification_message(slice auth_date, slice chat_instance_or_username, int with_username, slice receiver_address) inline {
  (_, int receiver_address_hash) = receiver_address.parse_std_addr();
  builder head = begin_cell().store_uint((receiver_address_hash >> (256 - HEAD_SIZE)), HEAD_SIZE);
  builder head_base64 = encode_to_base64url(head);

  builder message = begin_cell()
    .store_slice(VERIFICATION_MESSAGE_PREFIX)
    .store_uint(10, 8).store_slice("auth_date=").store_slice(auth_date)
    .store_uint(10, 8).store_slice("init_data={");

  if (with_username) {
    message = message
      .store_uint(34, 8).store_slice("user").store_uint(34, 8).store_slice(":{")
        .store_uint(34, 8).store_slice("username").store_uint(34, 8).store_slice(":").store_uint(34, 8).store_slice(chat_instance_or_username).store_uint(34, 8)
      .store_slice("}");
  } else {
    message = message
      .store_uint(34, 8).store_slice("chat_instance").store_uint(34, 8).store_slice(":").store_uint(34, 8).store_slice(chat_instance_or_username).store_uint(34, 8);
  }

  return message
    .store_slice("}")
      .store_uint(10, 8).store_slice("payload=").store_builder(head_base64)
      .end_cell()
      .begin_parse();
}

(cell) create_ton_transfer_message(slice receiver_address, int amount, slice comment) inline {
  builder msg = begin_cell()
    .store_uint(MSG_FLAG_NON_BOUNCEABLE, 6)  ;; bounceable, addr_std
    .store_slice(receiver_address)
    .store_coins(amount)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);  ;; use regular internal message header

  if (~ comment.null?()) {
    msg = msg
      .store_uint(0, 32)  ;; text comment opcode
      .store_slice(comment);
  }

  return msg.end_cell();
}

(cell) create_jetton_transfer_message(slice jetton_wallet_address, int is_tiny_jetton, slice receiver_address, int jetton_amount, slice response_address, slice comment) inline {
  ;; Create jetton transfer payload
  builder transfer_payload = begin_cell()
    .store_uint(op::jetton_transfer, 32)
    .store_uint(0, 64)  ;; query_id
    .store_coins(jetton_amount)
    .store_slice(receiver_address)
    .store_slice(response_address)
    .store_uint(0, 1)  ;; custom payload (empty)
    .store_coins(1);  ;; forward amount (1 nanoton for notification)

  if (comment.null?()) {
    transfer_payload = transfer_payload.store_uint(0, 1);  ;; forward payload (empty)
  } else {
    cell forward_payload = begin_cell()
      .store_uint(0, 32)  ;; text comment opcode
      .store_slice(comment)
      .end_cell();

    transfer_payload = transfer_payload
      .store_uint(1, 1)  ;; has forward payload
      .store_ref(forward_payload);
  }

  return begin_cell()
    .store_uint(MSG_FLAG_NON_BOUNCEABLE, 6)
    .store_slice(jetton_wallet_address)
    .store_coins(is_tiny_jetton ? TINY_JETTON_TRANSFER_FEE : JETTON_TRANSFER_FEE)
    .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_ref(transfer_payload.end_cell())
    .end_cell();
}

(slice) load_sudoer() inline {
  slice ds = get_data().begin_parse();
  return ds~load_msg_addr();
}

(slice, slice) load_jetton_wallets() inline {
  slice ds = get_data().begin_parse();
  ds~load_msg_addr();  ;; Skip sudoer
  slice usdt_jetton_wallet = ds~load_msg_addr();
  slice my_jetton_wallet = ds~load_msg_addr();
  return (usdt_jetton_wallet, my_jetton_wallet);
}

() save_check(int check_id, slice check_data) impure inline {
  slice ds = get_data().begin_parse();
  slice sudoer = ds~load_msg_addr();
  slice usdt_jetton_wallet = ds~load_msg_addr();
  slice my_jetton_wallet = ds~load_msg_addr();
  cell checks_dict = ds~load_dict();

  checks_dict~udict_set(32, check_id, check_data);

  set_data(begin_cell()
    .store_slice(sudoer)
    .store_slice(usdt_jetton_wallet)
    .store_slice(my_jetton_wallet)
    .store_dict(checks_dict)
    .end_cell());
}

() delete_check(int check_id) impure inline {
  slice ds = get_data().begin_parse();
  slice sudoer = ds~load_msg_addr();
  slice usdt_jetton_wallet = ds~load_msg_addr();
  slice my_jetton_wallet = ds~load_msg_addr();
  cell checks_dict = ds~load_dict();

  checks_dict~udict_delete?(32, check_id);

  set_data(begin_cell()
    .store_slice(sudoer)
    .store_slice(usdt_jetton_wallet)
    .store_slice(my_jetton_wallet)
    .store_dict(checks_dict)
    .end_cell());
}

(slice, slice) load_wallet_addresses() inline {
  slice ds = get_data().begin_parse();
  ds~load_msg_addr();  ;; Skip sudoer
  slice usdt_jetton_wallet = ds~load_msg_addr();
  slice my_jetton_wallet = ds~load_msg_addr();
  
  return (usdt_jetton_wallet, my_jetton_wallet);
}

() save_acl(slice sudoer, slice usdt_jetton_wallet, slice my_jetton_wallet) impure inline {
  slice ds = get_data().begin_parse();
  ds~load_msg_addr();  ;; Skip old sudoer
  ds~load_msg_addr();  ;; Skip old usdt_jetton_wallet
  ds~load_msg_addr();  ;; Skip old my_jetton_wallet
  cell checks_dict = ds~load_dict();

  set_data(begin_cell()
    .store_slice(sudoer)
    .store_slice(usdt_jetton_wallet)
    .store_slice(my_jetton_wallet)
    .store_dict(checks_dict)
    .end_cell());
}

(int, slice) load_check(int check_id) inline {
  slice ds = get_data().begin_parse();
  ds~load_msg_addr();  ;; Skip sudoer
  ds~load_msg_addr();  ;; Skip usdt_jetton_wallet
  ds~load_msg_addr();  ;; Skip my_jetton_wallet
  cell checks_dict = ds~load_dict();
  int exists = false;
  slice check_slice = null();
  (check_slice, exists) = checks_dict.udict_get?(32, check_id);
  return (exists, check_slice);
}

(int, int, cell, int, int, int, cell, cell, int, int, cell) deserialize_check(slice check_slice) inline {
  int amount = check_slice~load_uint(124);

  ;; Load jetton address (may be null if TON is used)
  int is_jetton = check_slice~load_int(1);
  cell jetton_wallet_address = null();
  int is_tiny_jetton = null();
  if (is_jetton) {
    jetton_wallet_address = check_slice~load_ref();
    is_tiny_jetton = check_slice~load_int(1);
  }

  int with_username = check_slice~load_int(1);
  int chat_instance = with_username == 0 ? check_slice~load_int(64) : null();
  cell username = with_username == -1 ? check_slice~load_ref() : null();
  cell comment = check_slice~load_ref();

  int status = check_slice~load_uint(8);
  int created_at = check_slice~load_uint(32);
  cell sender_address = check_slice~load_ref();

  return (amount, is_jetton, jetton_wallet_address, is_tiny_jetton, with_username, chat_instance, username, comment, status, created_at, sender_address);
}

(builder) serialize_check(int amount, int is_jetton, cell jetton_wallet_address, int is_tiny_jetton, int with_username, int chat_instance, cell username, cell comment, int status, int created_at, cell sender_address) inline {
  builder check_data = begin_cell()
    .store_uint(amount, 124)
    .store_int(is_jetton, 1);

  if (is_jetton) {
    check_data = check_data
      .store_ref(jetton_wallet_address)
      .store_int(is_tiny_jetton, 1);
  }

  check_data = check_data
    .store_int(with_username, 1);

  if (with_username == 0) {
    check_data = check_data
      .store_int(chat_instance, 64);
  } else {
    check_data = check_data
      .store_ref(username);
  }

  check_data = check_data
    .store_ref(comment)
    .store_uint(status, 8)
    .store_uint(created_at, 32)
    .store_ref(sender_address);

  return check_data;
}

() create_check(int check_id, int amount, cell jetton_wallet_address, int is_tiny_jetton, int with_username, int chat_instance, cell username, slice sender_address, int msg_value, cell comment) impure {
  throw_if(ERROR_INSUFFICIENT_FUNDS, amount <= 0);

  (int existing, _) = load_check(check_id);
  throw_if(ERROR_CHECK_ALREADY_EXISTS, existing);

  int is_jetton = ~ jetton_wallet_address.null?();

  int required_value = is_jetton ? (is_tiny_jetton ? TINY_JETTON_FULL_FEE : JETTON_FULL_FEE) : amount + TON_FULL_FEE;
  throw_if(ERROR_INSUFFICIENT_FUNDS, msg_value < required_value);

  int created_at = now();
  cell sender_address_cell = begin_cell().store_slice(sender_address).end_cell();

  builder check_data = serialize_check(amount, is_jetton, jetton_wallet_address, is_tiny_jetton, with_username, chat_instance, username, comment, status::pending, created_at, sender_address_cell);
  save_check(check_id, check_data.end_cell().begin_parse());
}

(int) validate_cash_check(
  int check_id, int is_jetton, int is_tiny_jetton, int amount, int with_username, int stored_chat_instance, cell stored_username, int status, int created_at, cell auth_date_cell, cell chat_instance_or_username_cell, slice receiver_address, slice signature
) inline {
  int addr_type = receiver_address.preload_uint(2);
  throw_if(ERROR_INVALID_RECEIVER_ADDRESS, addr_type != 2);

  slice chat_instance_or_username = chat_instance_or_username_cell.begin_parse();
  slice auth_date = auth_date_cell.begin_parse();

  slice message = create_verification_message(auth_date, chat_instance_or_username, with_username, receiver_address);
  int is_valid = check_data_signature(message, signature, TELEGRAM_PUBKEY);
  throw_if(ERROR_INCORRECT_SIGNATURE, ~ is_valid);

  accept_message();

  int auth_date_int = string_to_int(auth_date);

  if (auth_date_int < created_at) {
    return ERROR_AUTH_DATE_TOO_OLD;
  }

  if (with_username) {
    slice stored_username_slice = stored_username.begin_parse();
    if (~ equal_slices_bits(chat_instance_or_username, stored_username_slice)) {
      return ERROR_USERNAME_MISMATCH;
    }
  } else {
    int chat_instance_int = string_to_int(chat_instance_or_username);
    if (chat_instance_int != stored_chat_instance) {
      return ERROR_CHAT_INSTANCE_MISMATCH;
    }
  }

  return 0;  ;; all validations passed
}

() recv_external(slice in_msg) impure {
  int op = in_msg~load_uint(32);

  if (op == op::cash_check) {
    int check_id = in_msg~load_uint(32);

    cell auth_date_cell = in_msg~load_ref();
    cell chat_instance_or_username_cell = in_msg~load_ref();
    slice receiver_address = in_msg~load_msg_addr();
    slice signature = in_msg~load_bits(512);  ;; Ed25519 signature

    (int exists, slice check_slice) = load_check(check_id);
    throw_if(ERROR_CHECK_NOT_FOUND, ~ exists);

    (int amount, int is_jetton, cell jetton_wallet_address, int is_tiny_jetton, int with_username, int stored_chat_instance, cell stored_username, cell comment, int status, int created_at, cell sender_address) = deserialize_check(check_slice);

    int error_code = validate_cash_check(
      check_id, is_jetton, is_tiny_jetton, amount, with_username, stored_chat_instance, stored_username, status, created_at, auth_date_cell, chat_instance_or_username_cell, receiver_address, signature
    );

    if (error_code == 0) {
      ;; Use stored comment if not empty, otherwise use default comment
      slice comment_slice = comment.begin_parse();
      slice final_comment = comment_slice.slice_bits() > 0 ? comment_slice : DEFAULT_COMMENT;
      
      if (~ is_jetton) {
        cell msg = create_ton_transfer_message(receiver_address, amount, final_comment);
        send_raw_message(msg, SEND_MODE_PAY_FEES_SEPARATELY + SEND_MODE_IGNORE_ERRORS);
      } else {
        slice jetton_wallet_address_slice = jetton_wallet_address.begin_parse();
        cell msg = create_jetton_transfer_message(jetton_wallet_address_slice, is_tiny_jetton, receiver_address, amount, my_address(), final_comment);
        send_raw_message(msg, SEND_MODE_PAY_FEES_SEPARATELY + SEND_MODE_IGNORE_ERRORS);
      }
    } else {  ;; If there was a validation error, refund immediately
      slice sender_address_slice = sender_address.begin_parse();

      slice refund_comment = begin_cell()
        .store_slice("Refund due to error: 42").store_int(48 + error_code % 10, 8)
        .end_cell()
        .begin_parse();

      if (~ is_jetton) {
        cell msg = create_ton_transfer_message(sender_address_slice, amount, refund_comment);
        send_raw_message(msg, SEND_MODE_PAY_FEES_SEPARATELY + SEND_MODE_IGNORE_ERRORS);
      } else {
        slice jetton_wallet_address_slice = jetton_wallet_address.begin_parse();
        cell msg = create_jetton_transfer_message(jetton_wallet_address_slice, is_tiny_jetton, sender_address_slice, amount, sender_address_slice, refund_comment);
        send_raw_message(msg, SEND_MODE_PAY_FEES_SEPARATELY + SEND_MODE_IGNORE_ERRORS);
      }
    }

    delete_check(check_id);

    return ();
  }

  ;; Operation not supported
  throw(0xffff);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?()) {
    return ();
  }

  slice msg_header_slice = in_msg_full.begin_parse();
  int flags = msg_header_slice~load_uint(4);

  ;; Ignore bounced messages
  if (flags & 1) {
    return ();
  }

  slice sender_address = msg_header_slice~load_msg_addr();
  int op = in_msg_body~load_uint(32);

  if (op == op::set_acl) {
    slice sudoer = load_sudoer();
    throw_unless(ERROR_UNAUTHORIZED_SENDER, equal_slices_bits(sender_address, sudoer));

    slice new_sudoer = in_msg_body~load_msg_addr();
    slice new_usdt_jetton_wallet = in_msg_body~load_msg_addr();
    slice new_my_jetton_wallet = in_msg_body~load_msg_addr();

    save_acl(new_sudoer, new_usdt_jetton_wallet, new_my_jetton_wallet);

    return ();
  }

  if (op == op::sudoer_request) {
    slice sudoer = load_sudoer();
    throw_unless(ERROR_UNAUTHORIZED_SENDER, equal_slices_bits(sender_address, sudoer));

    cell message = in_msg_body~load_ref();
    int mode = in_msg_body~load_uint(8);

    send_raw_message(message, mode);

    return ();
  }

  if (op == op::create_check) {
    int check_id = in_msg_body~load_uint(32);
    int amount = msg_value - TON_FULL_FEE;
    int with_username = in_msg_body~load_int(1);
    int chat_instance = with_username == 0 ? in_msg_body~load_int(64) : null();
    cell username = with_username == -1 ? in_msg_body~load_ref() : null();
    cell comment = in_msg_body~load_ref();

    create_check(check_id, amount, null(), null(), with_username, chat_instance, username, sender_address, msg_value, comment);

    return ();
  }

  if (op == op::jetton_transfer_notification) {
    (slice usdt_jetton_wallet, slice my_jetton_wallet) = load_wallet_addresses();
    
    ;; Check if sender is one of the authorized jetton wallets
    int is_usdt_wallet = equal_slices_bits(sender_address, usdt_jetton_wallet);
    int is_my_wallet = equal_slices_bits(sender_address, my_jetton_wallet);
    throw_if(ERROR_UNAUTHORIZED_JETTON_WALLET, ~ (is_usdt_wallet | is_my_wallet));

    int query_id = in_msg_body~load_uint(64);
    int jetton_amount = in_msg_body~load_coins();
    slice original_sender = in_msg_body~load_msg_addr();

    ;; Check for correct forward payload
    throw_if(ERROR_MISSING_FORWARD_PAYLOAD, in_msg_body.slice_refs() == 0);

    slice forward_payload = in_msg_body~load_ref().begin_parse();
    ;; Check minimum bits: op(32) + check_id(32) + with_username(1) = 65 bits
    throw_if(ERROR_INVALID_FORWARD_PAYLOAD, forward_payload.slice_bits() < 65);

    int forward_op = forward_payload~load_uint(32);
    throw_if(ERROR_INVALID_FORWARD_OPERATION, forward_op != op::create_check);   

    ;; Parse check creation parameters from forward payload
    int check_id = forward_payload~load_uint(32);
    int with_username = forward_payload~load_int(1);

    if (with_username == 0) {
      throw_if(ERROR_INVALID_FORWARD_PAYLOAD, forward_payload.slice_bits() < 64);
    } else {
      throw_if(ERROR_INVALID_FORWARD_PAYLOAD, forward_payload.slice_refs() < 1);
    }

    int chat_instance = with_username == 0 ? forward_payload~load_int(64) : null();
    cell username = with_username == -1 ? forward_payload~load_ref() : null();
    cell comment = forward_payload~load_ref();

    cell jetton_wallet_address_cell = begin_cell().store_slice(sender_address).end_cell();
    int is_tiny_jetton = is_usdt_wallet;

    create_check(check_id, jetton_amount, jetton_wallet_address_cell, is_tiny_jetton, with_username, chat_instance, username, original_sender, msg_value, comment);

    return ();
  }
}

;; Get method to retrieve check information
;; @param check_id ID of the check to retrieve
;; @returns (amount, jetton_wallet_address_cell, with_username, chat_instance, username_cell, comment_cell, status, created_at)
(int, cell, int, int, cell, cell, int, int) get_check_info(int check_id) method_id {
  (int exists, slice check_slice) = load_check(check_id);
  throw_unless(ERROR_CHECK_NOT_FOUND, exists);

  (int amount, _, cell jetton_wallet_address_cell, _, int with_username, int chat_instance, cell username, cell comment, int status, int created_at, _) = deserialize_check(check_slice);

  return (amount, jetton_wallet_address_cell, with_username, chat_instance, username, comment, status, created_at);
}
